<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build a new server from scratch</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>TEAM_AREA</name>
          <description>The subnet where the server will be created depends on your the name of your team</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>bookingteam</string>
              <string>skywardsteam</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/Lemax-Dev/infrastructure-repo.git</url>
        <credentialsId>e80fc1e6-135f-47cd-b9a4-b1075d8d5963</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;==============Terraform Init==============&quot;
terraform init

echo &quot;==============Setting Instance Name Id==============&quot;
instanceNameId=&quot;$RANDOM&quot;;

echo &quot;=================================================&quot;
echo &quot;==============Test if Booking Team===============&quot;
echo &quot;=================================================&quot;

if [ &quot;$TEAM_AREA&quot; == &quot;bookingteam&quot; ]
then

echo &quot;resource \&quot;aws_instance\&quot; \&quot;bookingteam-dev-$instanceNameId\&quot; {
  ami  = \&quot;ami-0fd9f6305e5904533\&quot;
  instance_type  = \&quot;t2.micro\&quot;
  vpc_security_group_ids  = [\&quot;sg-0008be08e1a39844f\&quot;]
  key_name  = \&quot;lemaxdevkey\&quot;  
  tags = {
    Name  = \&quot;bookingteam-dev-$instanceNameId\&quot;
  }
  root_block_device {
    volume_size  = \&quot;15\&quot;
  }
}&quot; &gt;&gt; bookingteam.tf

echo &quot;==============CAT THE FILE==============&quot;
cat bookingteam.tf

fi

echo &quot;=================================================&quot;
echo &quot;==============Test if Skywards Team==============&quot;
echo &quot;=================================================&quot;

if [ &quot;$TEAM_AREA&quot; == &quot;skywardsteam&quot; ]
then
echo &quot;resource \&quot;aws_instance\&quot; \&quot;skywardsteam-dev-$instanceNameId\&quot; {
  ami  = \&quot;ami-0fd9f6305e5904533\&quot;
  instance_type  = \&quot;t2.micro\&quot;
  vpc_security_group_ids  = [\&quot;sg-0008be08e1a39844f\&quot;]
  key_name  = \&quot;lemaxdevkey\&quot;  
  tags = {
    Name  = \&quot;skywardsteam-dev-$instanceNameId\&quot;
  }
  root_block_device {
    volume_size  = \&quot;15\&quot;
  }
}&quot; &gt;&gt; skywardsteam.tf

echo &quot;==============CAT THE FILE==============&quot;
cat skywardsteam.tf

fi

echo &quot;==============Terraform Plan==============&quot;
terraform plan

echo &quot;==============Terraform Apply==============&quot;
terraform apply -auto-approve

echo &quot;==============Git Add==============&quot;
git add .

echo &quot;==============Git Commit==============&quot;
git commit -m &quot;Jenkins CI/CD automated build run&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="git@4.0.0">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>false</forcePush>
      <branchesToPush>
        <hudson.plugins.git.GitPublisher_-BranchToPush>
          <targetRepoName>origin</targetRepoName>
          <branchName>master</branchName>
        </hudson.plugins.git.GitPublisher_-BranchToPush>
      </branchesToPush>
    </hudson.plugins.git.GitPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>